#!/bin/bash

if [ -z "$DFM_SUBCOMMAND" ]; then
    echo "Subcommand $0 should be called using 'dfm' command."
    exit 1
fi

packages=()
os=$(uname -s)
os_arch="$(uname -m)"
s_flag=false # silent
y_flag=false # don't prompt y/n
i_flag=false # ignore failures

# Process command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -s) 
            s_flag=true 
            ;;
        -y) 
            y_flag=true 
            ;;
        -i) 
            i_flag=true 
            ;;
        *)  
            packages+=("$1")
            ;;
    esac

    shift 
done

validate_package() {
    local package="$1"
    local os="$2"
    local error=false

    # Validate if package is defined
    if ! output=$(yq ".packages.$package" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; then
        ! $s_flag && echo "Package '$package' is not defined in '$DFM_YAML'."
        error=true
    fi

    # Validate if OS is defined
    if [[ "$error" != true ]] && { ! output=$(yq ".packages.$package.$os" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; }; then
        ! $s_flag && echo "Package's '$package' OS '$os' is not defined in '$DFM_YAML'."
        error=true
    fi

    # Validate if 'check' is defined
    if [[ "$error" != true ]] && { ! output=$(yq ".packages.$package.$os.check" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; }; then
        ! $s_flag && echo "Missing 'check' entry on 'packages.$package.$os' in '$DFM_YAML'."
        error=true
    fi

    # Validate if 'install' is defined
    if [[ "$error" != true ]] && { ! output=$(yq ".packages.$package.$os.install" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; }; then
        ! $s_flag && echo "Missing 'install' entry on 'packages.$package.$os' in '$DFM_YAML'."
        error=true
    fi

    if [[ "$error" = true ]] && [[ "$i_flag" = true ]]; then
        return 2 # ignore errors but don't continue installing
    fi

    if [[ "$error" = true ]]; then
        exit 1;
    fi
}

install_package() {
    local package="$1"
    local os="$2"
    local user_input="y"

    package_key="$package"

    if eval "[ -n \"\${package_seen_${package_key}+x}\" ]"; then
        return
    fi

    eval "package_seen_${package_key}=1"

    ! $y_flag && read -rp "About to install package '$package'. Do you want to continue? (y/n): " user_input
    ! $s_flag && echo "Installing package '$package'..."

    if ! [[ "$user_input" == "y" ]]; then
        ! $s_flag && echo "Aborting..."
        exit 1
    fi

    # Check if the package has already been installed
    # if output=$(dfm check "$package" 2>&1); then
    if output=$(dfm check "$package"); then
        ! $s_flag && echo "Package '$package' was already installed, skipping."
        return
    fi

    install=$(yq ".packages.$package.$os.install" < "$DFM_YAML")
    
    if [ "$install" = "null" ]; then install=""; fi

    # if ! install_output=$(eval "$install" 2>&1); then 
    if ! install_output=$(eval "$install"); then 
        ! $s_flag && echo "Failed installing package '$package'. Error: $install_output"

        if [[ "$i_flag" = true ]]; then
            ! $s_flag && echo "Package '$package' has validation errors, ignoring."
            return
        fi

        exit 1
    fi

    ! $s_flag && echo "Successfully installed package '$package'."
}

walk_deps_and_install() {
    local package="$1"
    local path="$2"
    local new_path="${path}->'${package}'"
    local os_key_to_use="$os/$os_arch"

    if ! output=$(yq ".packages.$package.$os_key_to_use" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; then
        os_key_to_use="$os"
    fi

    validate_package "$package" "$os_key_to_use"

    if [ $? -eq 2 ]; then
        ! $s_flag && echo "Package '$package' has validation errors, ignoring."
        return
    fi

    if [[ "$path" =~ "->'${package}'" ]]; then
        ! $s_flag && echo "A cyclic dependency involving '$package' was found in the path '$new_path'."

        if [[ "$i_flag" = true ]]; then
            ! $s_flag && echo "Package '$package' has validation errors, ignoring."
            return
        fi

        exit 1
    fi

    deps=()

    while IFS= read -r line; do
        deps+=("$line")
    done < <(dfm deps "$package")

    for dep in "${deps[@]}"; do
        walk_deps_and_install "$dep" "$new_path"
    done

    install_package "$package" "$os_key_to_use"
}

# Main
if [ ${#packages[@]} -eq 0 ]; then
    packages=()

    while IFS= read -r line; do
        packages+=("$line")
    done < <(dfm list)
fi 

! $s_flag && echo -n "About to install the following packages: "

for package in "${packages[@]}"; do
    ! $s_flag && echo -n "$package " 
done

! $s_flag && echo ""

user_input="y"

! $y_flag && read -rp "Do you want to continue? (y/n): " user_input

if ! [[ "$user_input" == "y" ]]; then
    ! $s_flag && echo "Aborting..."
    exit 1
fi

y_flag=true

for package in "${packages[@]}"; do
    walk_deps_and_install "$package" "<root>"
done

exit 0