#!/bin/bash

# Parse arguments
a_flag=false # Show all packages
o_flag="" # What OS to show
s_flag="" # Installation status
i_flag=false # Package info
os="$(uname -s)"
available_oss=("Linux" "Darwin")

while [ "$#" -gt 0 ]; do
    case "$1" in
        -a)
            a_flag=true
            ;;
        -o)
            shift 
            o_flag="$1"

            if [[ "$o_flag" == "Linux" || "$o_flag" == "Darwin" ]]; then
                os="$o_flag"
            else
                echo "Invalid OS '$o_flag'"
                exit 1
            fi

            ;;
        -s)
            shift
            s_flag="$1"

            if [[ "$s_flag" != "true" && "$s_flag" != "false" ]]; then
                echo "-s must be 'true' or 'false'"
                exit 1
            fi
            ;;
        -i)
            i_flag=true
            ;;
        *)
            ;;
    esac
    shift 
done

# Validate that -a is not set alongside -o or -s
if [[ "$a_flag" != "false" ]] && { [[ -n "$o_flag" ]] || [[ -n "$s_flag" ]]; }; then
    echo "Cannot set -a with -o or -s"
    exit 1
fi

# Read the output into an array named 'packages'
mapfile -t packages < <(yq '.packages | keys' < "$DFM_YAML" | sed 's/^- //')

print_package() {
    local package_name="$1"; shift
    local package_is_installed="$1"; shift 
    local package_oss=()
    local package_os=

    for package_os in "$@"; do
        package_oss+=("$package_os")
    done

    echo -n "$package_name"

    if [ "$i_flag" = "true" ]; then
        echo -n " "

        # Echo OSs
        IFS=','
        oss_text="${package_oss[*]}"
        unset IFS
        
        if [ -z "$oss_text" ]; then
            echo -n "<empty>"
        else
            echo -n "$oss_text"
        fi

        echo -n " "

        # Echo installation status
        if [ "$package_is_installed" = "true" ]; then
            echo -n "installed"
        else
            echo -n "not_installed"
        fi
    fi

    echo ""
}

contains_os() {
    local needle="$1"; shift
    
    for haystack in "$@"; do
        if [ "$haystack" = "$needle" ]; then
            return 0
        fi
    done

    return 1
}

# Iterate over the packages array
for package in "${packages[@]}"; do
    package_installed=""
    package_oss=()

    # Get OS's
    for available_os in "${available_oss[@]}"; do
        if ! ( ! output=$(yq ".packages.$package.$available_os" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ] ); then
            package_oss+=("$available_os")
        fi
    done

    in_os=false

    if contains_os "$os" "${package_oss[@]}"; then
        in_os=true
    fi

    # Get installation status if needed
    if [ "$i_flag" = "true" ] || [ "$s_flag" = "true" ] || [ "$s_flag" = "false" ]; then
        if [ "$in_os" = "true" ] && dfm check "$package" >/dev/null 2>&1; then
            package_installed=true
        else
            package_installed=false
        fi
    fi

    # Print all packages
    if [ "$a_flag" = "true" ]; then
        print_package "$package" "$package_installed" "${package_oss[@]}"
        continue
    fi;

    # Filter out by installation status and OS
    if [ "$in_os" = "true" ]; then
        if [[ -n "$s_flag" ]]; then
            if { { [ "$s_flag" = "true" ] && [ "$package_installed" = "true" ]; } || { [ "$s_flag" = "false" ] && [ "$package_installed" = "false" ]; } }; then
                print_package "$package" "$package_installed" "${package_oss[@]}"
                continue
            fi
        else
            print_package "$package" "$package_installed" "${package_oss[@]}"
            continue
        fi
    fi
done

exit 0