#!/bin/bash

if [ -z "$DFM_SUBCOMMAND" ]; then
    echo "Subcommand $0 should be called using 'dfm' command."
    exit 1
fi

if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <package>"
    exit 1
fi

package="$1"
os="$(uname -s)"
os_arch="$(uname -m)"
os_with_arch="$os/$os_arch"
os_key_to_use="$os_with_arch"

if [[ "$package" == *-* ]]; then
    echo "Invalid character - in package name '$package'."
    exit 1
fi

# Validate if package is defined
if ! output=$(yq ".packages.$package" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; then
    echo "Package '$package' is not defined in '$DFM_YAML'."
    exit 1
fi

# Validate if OS is defined
if ! output=$(yq ".packages.$package.$os_key_to_use" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; then
    os_key_to_use="$os"

    if ! output=$(yq ".packages.$package.$os_key_to_use" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; then
        echo "Package's '$package' OS '$os_key_to_use' is not defined in '$DFM_YAML'."
        exit 1
    fi
fi

# Validate if 'check' is defined
if ! output=$(yq ".packages.$package.$os_key_to_use.check" < "$DFM_YAML") || [ -z "$output" ] || [ "$output" = "null" ]; then
    echo "Missing 'check' entry on 'packages.$package.$os_key_to_use' in '$DFM_YAML'."
    exit 1
fi

# Parse arguments
s_flag=false

while [ "$#" -gt 0 ]; do
    case "$1" in
        -s)
            s_flag=true
            ;;
        *)
            ;;
    esac
    shift 
done

# Check package subcommand
check_command=$(yq ".packages.$package.$os_key_to_use.check" < "$DFM_YAML")

# if eval "$check_command" >/dev/null 2>&1; then
if eval "$check_command"; then
    ! $s_flag && echo "Package '$package' is installed on $os_key_to_use.";
    exit 0
else
    ! $s_flag && echo "Package '$package' is not installed on $os_key_to_use.";
    exit 1
fi

exit 0